{"message":"unresolved link to `_derive::_tutorial`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/lib.rs","byte_start":343,"byte_end":3556,"line_start":6,"line_end":75,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"//! > **Command Line Argument Parser for Rust**","highlight_start":1,"highlight_end":48},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Quick Links:","highlight_start":1,"highlight_end":17},{"text":"//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":69},{"text":"//! - Builder [tutorial][_tutorial] and [reference](index.html)","highlight_start":1,"highlight_end":64},{"text":"//! - [Cookbook][_cookbook]","highlight_start":1,"highlight_end":28},{"text":"//! - [FAQ][_faq]","highlight_start":1,"highlight_end":18},{"text":"//! - [Discussions](https://github.com/clap-rs/clap/discussions)","highlight_start":1,"highlight_end":65},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Aspirations","highlight_start":1,"highlight_end":19},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! - Out of the box, users get a polished CLI experience","highlight_start":1,"highlight_end":58},{"text":"//!   - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc","highlight_start":1,"highlight_end":188},{"text":"//! - Flexible enough to port your existing CLI interface","highlight_start":1,"highlight_end":58},{"text":"//!   - However, we won't necessarily streamline support for each use case","highlight_start":1,"highlight_end":75},{"text":"//! - Reasonable parse performance","highlight_start":1,"highlight_end":35},{"text":"//! - Resilient maintainership, including","highlight_start":1,"highlight_end":42},{"text":"//!   - Willing to break compatibility rather than batching up breaking changes in large releases","highlight_start":1,"highlight_end":98},{"text":"//!   - Leverage feature flags to keep to one active branch","highlight_start":1,"highlight_end":60},{"text":"//!   - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor","highlight_start":1,"highlight_end":91},{"text":"//! - We follow semver and will wait about 6-9 months between major breaking changes","highlight_start":1,"highlight_end":85},{"text":"//! - We will support the last two minor Rust releases (MSRV, currently 1.60.0)","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! While these aspirations can be at odds with fast build times and low binary","highlight_start":1,"highlight_end":80},{"text":"//! size, we will still strive to keep these reasonable for the flexibility you","highlight_start":1,"highlight_end":80},{"text":"//! get.  Check out the","highlight_start":1,"highlight_end":24},{"text":"//! [argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for","highlight_start":1,"highlight_end":82},{"text":"//! CLI parsers optimized for other use cases.","highlight_start":1,"highlight_end":47},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Example","highlight_start":1,"highlight_end":15},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Run","highlight_start":1,"highlight_end":8},{"text":"//! ```console","highlight_start":1,"highlight_end":15},{"text":"//! $ cargo add clap --features derive","highlight_start":1,"highlight_end":39},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//! *(See also [feature flag reference][_features])*","highlight_start":1,"highlight_end":53},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Then define your CLI in `main.rs`:","highlight_start":1,"highlight_end":39},{"text":"#![cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":58},{"text":"#![cfg_attr(feature = \"derive\", doc = \" ```no_run\")]","highlight_start":1,"highlight_end":53},{"text":"#![doc = include_str!(\"../examples/demo.rs\")]","highlight_start":1,"highlight_end":46},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! And try it out:","highlight_start":1,"highlight_end":20},{"text":"#![doc = include_str!(\"../examples/demo.md\")]","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! See also the derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ### Related Projects","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Augment clap:","highlight_start":1,"highlight_end":18},{"text":"//! - [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux","highlight_start":1,"highlight_end":104},{"text":"//! - [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)","highlight_start":1,"highlight_end":116},{"text":"//! - [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`","highlight_start":1,"highlight_end":93},{"text":"//! - [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)","highlight_start":1,"highlight_end":96},{"text":"//! - [clap_complete](https://crates.io/crates/clap_complete) for shell completion support","highlight_start":1,"highlight_end":91},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! CLI Helpers","highlight_start":1,"highlight_end":16},{"text":"//! - [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)","highlight_start":1,"highlight_end":74},{"text":"//! - [clap-cargo](https://crates.io/crates/clap-cargo)","highlight_start":1,"highlight_end":56},{"text":"//! - [concolor-clap](https://crates.io/crates/concolor-clap)","highlight_start":1,"highlight_end":62},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Testing","highlight_start":1,"highlight_end":12},{"text":"//! - [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing","highlight_start":1,"highlight_end":74},{"text":"//! - [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing","highlight_start":1,"highlight_end":83},{"text":"//! - [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing","highlight_start":1,"highlight_end":132},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Documentation:","highlight_start":1,"highlight_end":19},{"text":"//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book","highlight_start":1,"highlight_end":84},{"text":"//!","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n                    ^^^^^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_derive` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(rustdoc::broken_intra_doc_links)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `_derive::_tutorial`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/lib.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! > **Command Line Argument Parser for Rust**\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Quick Links:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m                               ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_derive` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\u001b[0m\n\n"}
{"message":"unresolved link to `_derive`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/lib.rs","byte_start":343,"byte_end":3556,"line_start":6,"line_end":75,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"//! > **Command Line Argument Parser for Rust**","highlight_start":1,"highlight_end":48},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Quick Links:","highlight_start":1,"highlight_end":17},{"text":"//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":69},{"text":"//! - Builder [tutorial][_tutorial] and [reference](index.html)","highlight_start":1,"highlight_end":64},{"text":"//! - [Cookbook][_cookbook]","highlight_start":1,"highlight_end":28},{"text":"//! - [FAQ][_faq]","highlight_start":1,"highlight_end":18},{"text":"//! - [Discussions](https://github.com/clap-rs/clap/discussions)","highlight_start":1,"highlight_end":65},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Aspirations","highlight_start":1,"highlight_end":19},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! - Out of the box, users get a polished CLI experience","highlight_start":1,"highlight_end":58},{"text":"//!   - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc","highlight_start":1,"highlight_end":188},{"text":"//! - Flexible enough to port your existing CLI interface","highlight_start":1,"highlight_end":58},{"text":"//!   - However, we won't necessarily streamline support for each use case","highlight_start":1,"highlight_end":75},{"text":"//! - Reasonable parse performance","highlight_start":1,"highlight_end":35},{"text":"//! - Resilient maintainership, including","highlight_start":1,"highlight_end":42},{"text":"//!   - Willing to break compatibility rather than batching up breaking changes in large releases","highlight_start":1,"highlight_end":98},{"text":"//!   - Leverage feature flags to keep to one active branch","highlight_start":1,"highlight_end":60},{"text":"//!   - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor","highlight_start":1,"highlight_end":91},{"text":"//! - We follow semver and will wait about 6-9 months between major breaking changes","highlight_start":1,"highlight_end":85},{"text":"//! - We will support the last two minor Rust releases (MSRV, currently 1.60.0)","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! While these aspirations can be at odds with fast build times and low binary","highlight_start":1,"highlight_end":80},{"text":"//! size, we will still strive to keep these reasonable for the flexibility you","highlight_start":1,"highlight_end":80},{"text":"//! get.  Check out the","highlight_start":1,"highlight_end":24},{"text":"//! [argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for","highlight_start":1,"highlight_end":82},{"text":"//! CLI parsers optimized for other use cases.","highlight_start":1,"highlight_end":47},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Example","highlight_start":1,"highlight_end":15},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Run","highlight_start":1,"highlight_end":8},{"text":"//! ```console","highlight_start":1,"highlight_end":15},{"text":"//! $ cargo add clap --features derive","highlight_start":1,"highlight_end":39},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//! *(See also [feature flag reference][_features])*","highlight_start":1,"highlight_end":53},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Then define your CLI in `main.rs`:","highlight_start":1,"highlight_end":39},{"text":"#![cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":58},{"text":"#![cfg_attr(feature = \"derive\", doc = \" ```no_run\")]","highlight_start":1,"highlight_end":53},{"text":"#![doc = include_str!(\"../examples/demo.rs\")]","highlight_start":1,"highlight_end":46},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! And try it out:","highlight_start":1,"highlight_end":20},{"text":"#![doc = include_str!(\"../examples/demo.md\")]","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! See also the derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ### Related Projects","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Augment clap:","highlight_start":1,"highlight_end":18},{"text":"//! - [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux","highlight_start":1,"highlight_end":104},{"text":"//! - [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)","highlight_start":1,"highlight_end":116},{"text":"//! - [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`","highlight_start":1,"highlight_end":93},{"text":"//! - [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)","highlight_start":1,"highlight_end":96},{"text":"//! - [clap_complete](https://crates.io/crates/clap_complete) for shell completion support","highlight_start":1,"highlight_end":91},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! CLI Helpers","highlight_start":1,"highlight_end":16},{"text":"//! - [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)","highlight_start":1,"highlight_end":74},{"text":"//! - [clap-cargo](https://crates.io/crates/clap-cargo)","highlight_start":1,"highlight_end":56},{"text":"//! - [concolor-clap](https://crates.io/crates/concolor-clap)","highlight_start":1,"highlight_end":62},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Testing","highlight_start":1,"highlight_end":12},{"text":"//! - [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing","highlight_start":1,"highlight_end":74},{"text":"//! - [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing","highlight_start":1,"highlight_end":83},{"text":"//! - [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing","highlight_start":1,"highlight_end":132},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Documentation:","highlight_start":1,"highlight_end":19},{"text":"//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book","highlight_start":1,"highlight_end":84},{"text":"//!","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n                                                        ^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_derive` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `_derive`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/lib.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! > **Command Line Argument Parser for Rust**\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Quick Links:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m                                                                   ^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_derive` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `_tutorial`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/lib.rs","byte_start":343,"byte_end":3556,"line_start":6,"line_end":75,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"//! > **Command Line Argument Parser for Rust**","highlight_start":1,"highlight_end":48},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Quick Links:","highlight_start":1,"highlight_end":17},{"text":"//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":69},{"text":"//! - Builder [tutorial][_tutorial] and [reference](index.html)","highlight_start":1,"highlight_end":64},{"text":"//! - [Cookbook][_cookbook]","highlight_start":1,"highlight_end":28},{"text":"//! - [FAQ][_faq]","highlight_start":1,"highlight_end":18},{"text":"//! - [Discussions](https://github.com/clap-rs/clap/discussions)","highlight_start":1,"highlight_end":65},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Aspirations","highlight_start":1,"highlight_end":19},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! - Out of the box, users get a polished CLI experience","highlight_start":1,"highlight_end":58},{"text":"//!   - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc","highlight_start":1,"highlight_end":188},{"text":"//! - Flexible enough to port your existing CLI interface","highlight_start":1,"highlight_end":58},{"text":"//!   - However, we won't necessarily streamline support for each use case","highlight_start":1,"highlight_end":75},{"text":"//! - Reasonable parse performance","highlight_start":1,"highlight_end":35},{"text":"//! - Resilient maintainership, including","highlight_start":1,"highlight_end":42},{"text":"//!   - Willing to break compatibility rather than batching up breaking changes in large releases","highlight_start":1,"highlight_end":98},{"text":"//!   - Leverage feature flags to keep to one active branch","highlight_start":1,"highlight_end":60},{"text":"//!   - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor","highlight_start":1,"highlight_end":91},{"text":"//! - We follow semver and will wait about 6-9 months between major breaking changes","highlight_start":1,"highlight_end":85},{"text":"//! - We will support the last two minor Rust releases (MSRV, currently 1.60.0)","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! While these aspirations can be at odds with fast build times and low binary","highlight_start":1,"highlight_end":80},{"text":"//! size, we will still strive to keep these reasonable for the flexibility you","highlight_start":1,"highlight_end":80},{"text":"//! get.  Check out the","highlight_start":1,"highlight_end":24},{"text":"//! [argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for","highlight_start":1,"highlight_end":82},{"text":"//! CLI parsers optimized for other use cases.","highlight_start":1,"highlight_end":47},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Example","highlight_start":1,"highlight_end":15},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Run","highlight_start":1,"highlight_end":8},{"text":"//! ```console","highlight_start":1,"highlight_end":15},{"text":"//! $ cargo add clap --features derive","highlight_start":1,"highlight_end":39},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//! *(See also [feature flag reference][_features])*","highlight_start":1,"highlight_end":53},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Then define your CLI in `main.rs`:","highlight_start":1,"highlight_end":39},{"text":"#![cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":58},{"text":"#![cfg_attr(feature = \"derive\", doc = \" ```no_run\")]","highlight_start":1,"highlight_end":53},{"text":"#![doc = include_str!(\"../examples/demo.rs\")]","highlight_start":1,"highlight_end":46},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! And try it out:","highlight_start":1,"highlight_end":20},{"text":"#![doc = include_str!(\"../examples/demo.md\")]","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! See also the derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ### Related Projects","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Augment clap:","highlight_start":1,"highlight_end":18},{"text":"//! - [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux","highlight_start":1,"highlight_end":104},{"text":"//! - [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)","highlight_start":1,"highlight_end":116},{"text":"//! - [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`","highlight_start":1,"highlight_end":93},{"text":"//! - [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)","highlight_start":1,"highlight_end":96},{"text":"//! - [clap_complete](https://crates.io/crates/clap_complete) for shell completion support","highlight_start":1,"highlight_end":91},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! CLI Helpers","highlight_start":1,"highlight_end":16},{"text":"//! - [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)","highlight_start":1,"highlight_end":74},{"text":"//! - [clap-cargo](https://crates.io/crates/clap-cargo)","highlight_start":1,"highlight_end":56},{"text":"//! - [concolor-clap](https://crates.io/crates/concolor-clap)","highlight_start":1,"highlight_end":62},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Testing","highlight_start":1,"highlight_end":12},{"text":"//! - [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing","highlight_start":1,"highlight_end":74},{"text":"//! - [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing","highlight_start":1,"highlight_end":83},{"text":"//! - [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing","highlight_start":1,"highlight_end":132},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Documentation:","highlight_start":1,"highlight_end":19},{"text":"//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book","highlight_start":1,"highlight_end":84},{"text":"//!","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n- Builder [tutorial][_tutorial] and [reference](index.html)\n                     ^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_tutorial` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `_tutorial`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/lib.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! > **Command Line Argument Parser for Rust**\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Quick Links:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           - Builder [tutorial][_tutorial] and [reference](index.html)\u001b[0m\n\u001b[0m                                ^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_tutorial` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `_cookbook`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/lib.rs","byte_start":343,"byte_end":3556,"line_start":6,"line_end":75,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"//! > **Command Line Argument Parser for Rust**","highlight_start":1,"highlight_end":48},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Quick Links:","highlight_start":1,"highlight_end":17},{"text":"//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":69},{"text":"//! - Builder [tutorial][_tutorial] and [reference](index.html)","highlight_start":1,"highlight_end":64},{"text":"//! - [Cookbook][_cookbook]","highlight_start":1,"highlight_end":28},{"text":"//! - [FAQ][_faq]","highlight_start":1,"highlight_end":18},{"text":"//! - [Discussions](https://github.com/clap-rs/clap/discussions)","highlight_start":1,"highlight_end":65},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Aspirations","highlight_start":1,"highlight_end":19},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! - Out of the box, users get a polished CLI experience","highlight_start":1,"highlight_end":58},{"text":"//!   - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc","highlight_start":1,"highlight_end":188},{"text":"//! - Flexible enough to port your existing CLI interface","highlight_start":1,"highlight_end":58},{"text":"//!   - However, we won't necessarily streamline support for each use case","highlight_start":1,"highlight_end":75},{"text":"//! - Reasonable parse performance","highlight_start":1,"highlight_end":35},{"text":"//! - Resilient maintainership, including","highlight_start":1,"highlight_end":42},{"text":"//!   - Willing to break compatibility rather than batching up breaking changes in large releases","highlight_start":1,"highlight_end":98},{"text":"//!   - Leverage feature flags to keep to one active branch","highlight_start":1,"highlight_end":60},{"text":"//!   - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor","highlight_start":1,"highlight_end":91},{"text":"//! - We follow semver and will wait about 6-9 months between major breaking changes","highlight_start":1,"highlight_end":85},{"text":"//! - We will support the last two minor Rust releases (MSRV, currently 1.60.0)","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! While these aspirations can be at odds with fast build times and low binary","highlight_start":1,"highlight_end":80},{"text":"//! size, we will still strive to keep these reasonable for the flexibility you","highlight_start":1,"highlight_end":80},{"text":"//! get.  Check out the","highlight_start":1,"highlight_end":24},{"text":"//! [argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for","highlight_start":1,"highlight_end":82},{"text":"//! CLI parsers optimized for other use cases.","highlight_start":1,"highlight_end":47},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Example","highlight_start":1,"highlight_end":15},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Run","highlight_start":1,"highlight_end":8},{"text":"//! ```console","highlight_start":1,"highlight_end":15},{"text":"//! $ cargo add clap --features derive","highlight_start":1,"highlight_end":39},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//! *(See also [feature flag reference][_features])*","highlight_start":1,"highlight_end":53},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Then define your CLI in `main.rs`:","highlight_start":1,"highlight_end":39},{"text":"#![cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":58},{"text":"#![cfg_attr(feature = \"derive\", doc = \" ```no_run\")]","highlight_start":1,"highlight_end":53},{"text":"#![doc = include_str!(\"../examples/demo.rs\")]","highlight_start":1,"highlight_end":46},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! And try it out:","highlight_start":1,"highlight_end":20},{"text":"#![doc = include_str!(\"../examples/demo.md\")]","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! See also the derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ### Related Projects","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Augment clap:","highlight_start":1,"highlight_end":18},{"text":"//! - [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux","highlight_start":1,"highlight_end":104},{"text":"//! - [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)","highlight_start":1,"highlight_end":116},{"text":"//! - [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`","highlight_start":1,"highlight_end":93},{"text":"//! - [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)","highlight_start":1,"highlight_end":96},{"text":"//! - [clap_complete](https://crates.io/crates/clap_complete) for shell completion support","highlight_start":1,"highlight_end":91},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! CLI Helpers","highlight_start":1,"highlight_end":16},{"text":"//! - [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)","highlight_start":1,"highlight_end":74},{"text":"//! - [clap-cargo](https://crates.io/crates/clap-cargo)","highlight_start":1,"highlight_end":56},{"text":"//! - [concolor-clap](https://crates.io/crates/concolor-clap)","highlight_start":1,"highlight_end":62},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Testing","highlight_start":1,"highlight_end":12},{"text":"//! - [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing","highlight_start":1,"highlight_end":74},{"text":"//! - [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing","highlight_start":1,"highlight_end":83},{"text":"//! - [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing","highlight_start":1,"highlight_end":132},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Documentation:","highlight_start":1,"highlight_end":19},{"text":"//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book","highlight_start":1,"highlight_end":84},{"text":"//!","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n- [Cookbook][_cookbook]\n             ^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_cookbook` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `_cookbook`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/lib.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! > **Command Line Argument Parser for Rust**\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Quick Links:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           - [Cookbook][_cookbook]\u001b[0m\n\u001b[0m                        ^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_cookbook` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `_faq`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/lib.rs","byte_start":343,"byte_end":3556,"line_start":6,"line_end":75,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"//! > **Command Line Argument Parser for Rust**","highlight_start":1,"highlight_end":48},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Quick Links:","highlight_start":1,"highlight_end":17},{"text":"//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":69},{"text":"//! - Builder [tutorial][_tutorial] and [reference](index.html)","highlight_start":1,"highlight_end":64},{"text":"//! - [Cookbook][_cookbook]","highlight_start":1,"highlight_end":28},{"text":"//! - [FAQ][_faq]","highlight_start":1,"highlight_end":18},{"text":"//! - [Discussions](https://github.com/clap-rs/clap/discussions)","highlight_start":1,"highlight_end":65},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Aspirations","highlight_start":1,"highlight_end":19},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! - Out of the box, users get a polished CLI experience","highlight_start":1,"highlight_end":58},{"text":"//!   - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc","highlight_start":1,"highlight_end":188},{"text":"//! - Flexible enough to port your existing CLI interface","highlight_start":1,"highlight_end":58},{"text":"//!   - However, we won't necessarily streamline support for each use case","highlight_start":1,"highlight_end":75},{"text":"//! - Reasonable parse performance","highlight_start":1,"highlight_end":35},{"text":"//! - Resilient maintainership, including","highlight_start":1,"highlight_end":42},{"text":"//!   - Willing to break compatibility rather than batching up breaking changes in large releases","highlight_start":1,"highlight_end":98},{"text":"//!   - Leverage feature flags to keep to one active branch","highlight_start":1,"highlight_end":60},{"text":"//!   - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor","highlight_start":1,"highlight_end":91},{"text":"//! - We follow semver and will wait about 6-9 months between major breaking changes","highlight_start":1,"highlight_end":85},{"text":"//! - We will support the last two minor Rust releases (MSRV, currently 1.60.0)","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! While these aspirations can be at odds with fast build times and low binary","highlight_start":1,"highlight_end":80},{"text":"//! size, we will still strive to keep these reasonable for the flexibility you","highlight_start":1,"highlight_end":80},{"text":"//! get.  Check out the","highlight_start":1,"highlight_end":24},{"text":"//! [argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for","highlight_start":1,"highlight_end":82},{"text":"//! CLI parsers optimized for other use cases.","highlight_start":1,"highlight_end":47},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Example","highlight_start":1,"highlight_end":15},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Run","highlight_start":1,"highlight_end":8},{"text":"//! ```console","highlight_start":1,"highlight_end":15},{"text":"//! $ cargo add clap --features derive","highlight_start":1,"highlight_end":39},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//! *(See also [feature flag reference][_features])*","highlight_start":1,"highlight_end":53},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Then define your CLI in `main.rs`:","highlight_start":1,"highlight_end":39},{"text":"#![cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":58},{"text":"#![cfg_attr(feature = \"derive\", doc = \" ```no_run\")]","highlight_start":1,"highlight_end":53},{"text":"#![doc = include_str!(\"../examples/demo.rs\")]","highlight_start":1,"highlight_end":46},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! And try it out:","highlight_start":1,"highlight_end":20},{"text":"#![doc = include_str!(\"../examples/demo.md\")]","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! See also the derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ### Related Projects","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Augment clap:","highlight_start":1,"highlight_end":18},{"text":"//! - [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux","highlight_start":1,"highlight_end":104},{"text":"//! - [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)","highlight_start":1,"highlight_end":116},{"text":"//! - [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`","highlight_start":1,"highlight_end":93},{"text":"//! - [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)","highlight_start":1,"highlight_end":96},{"text":"//! - [clap_complete](https://crates.io/crates/clap_complete) for shell completion support","highlight_start":1,"highlight_end":91},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! CLI Helpers","highlight_start":1,"highlight_end":16},{"text":"//! - [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)","highlight_start":1,"highlight_end":74},{"text":"//! - [clap-cargo](https://crates.io/crates/clap-cargo)","highlight_start":1,"highlight_end":56},{"text":"//! - [concolor-clap](https://crates.io/crates/concolor-clap)","highlight_start":1,"highlight_end":62},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Testing","highlight_start":1,"highlight_end":12},{"text":"//! - [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing","highlight_start":1,"highlight_end":74},{"text":"//! - [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing","highlight_start":1,"highlight_end":83},{"text":"//! - [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing","highlight_start":1,"highlight_end":132},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Documentation:","highlight_start":1,"highlight_end":19},{"text":"//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book","highlight_start":1,"highlight_end":84},{"text":"//!","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n- [FAQ][_faq]\n        ^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_faq` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `_faq`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/lib.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! > **Command Line Argument Parser for Rust**\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Quick Links:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           - [FAQ][_faq]\u001b[0m\n\u001b[0m                   ^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_faq` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/lib.rs","byte_start":343,"byte_end":3556,"line_start":6,"line_end":75,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"//! > **Command Line Argument Parser for Rust**","highlight_start":1,"highlight_end":48},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Quick Links:","highlight_start":1,"highlight_end":17},{"text":"//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":69},{"text":"//! - Builder [tutorial][_tutorial] and [reference](index.html)","highlight_start":1,"highlight_end":64},{"text":"//! - [Cookbook][_cookbook]","highlight_start":1,"highlight_end":28},{"text":"//! - [FAQ][_faq]","highlight_start":1,"highlight_end":18},{"text":"//! - [Discussions](https://github.com/clap-rs/clap/discussions)","highlight_start":1,"highlight_end":65},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Aspirations","highlight_start":1,"highlight_end":19},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! - Out of the box, users get a polished CLI experience","highlight_start":1,"highlight_end":58},{"text":"//!   - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc","highlight_start":1,"highlight_end":188},{"text":"//! - Flexible enough to port your existing CLI interface","highlight_start":1,"highlight_end":58},{"text":"//!   - However, we won't necessarily streamline support for each use case","highlight_start":1,"highlight_end":75},{"text":"//! - Reasonable parse performance","highlight_start":1,"highlight_end":35},{"text":"//! - Resilient maintainership, including","highlight_start":1,"highlight_end":42},{"text":"//!   - Willing to break compatibility rather than batching up breaking changes in large releases","highlight_start":1,"highlight_end":98},{"text":"//!   - Leverage feature flags to keep to one active branch","highlight_start":1,"highlight_end":60},{"text":"//!   - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor","highlight_start":1,"highlight_end":91},{"text":"//! - We follow semver and will wait about 6-9 months between major breaking changes","highlight_start":1,"highlight_end":85},{"text":"//! - We will support the last two minor Rust releases (MSRV, currently 1.60.0)","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! While these aspirations can be at odds with fast build times and low binary","highlight_start":1,"highlight_end":80},{"text":"//! size, we will still strive to keep these reasonable for the flexibility you","highlight_start":1,"highlight_end":80},{"text":"//! get.  Check out the","highlight_start":1,"highlight_end":24},{"text":"//! [argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for","highlight_start":1,"highlight_end":82},{"text":"//! CLI parsers optimized for other use cases.","highlight_start":1,"highlight_end":47},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ## Example","highlight_start":1,"highlight_end":15},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Run","highlight_start":1,"highlight_end":8},{"text":"//! ```console","highlight_start":1,"highlight_end":15},{"text":"//! $ cargo add clap --features derive","highlight_start":1,"highlight_end":39},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//! *(See also [feature flag reference][_features])*","highlight_start":1,"highlight_end":53},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Then define your CLI in `main.rs`:","highlight_start":1,"highlight_end":39},{"text":"#![cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":58},{"text":"#![cfg_attr(feature = \"derive\", doc = \" ```no_run\")]","highlight_start":1,"highlight_end":53},{"text":"#![doc = include_str!(\"../examples/demo.rs\")]","highlight_start":1,"highlight_end":46},{"text":"//! ```","highlight_start":1,"highlight_end":8},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! And try it out:","highlight_start":1,"highlight_end":20},{"text":"#![doc = include_str!(\"../examples/demo.md\")]","highlight_start":1,"highlight_end":46},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! See also the derive [tutorial][_derive::_tutorial] and [reference][_derive]","highlight_start":1,"highlight_end":80},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! ### Related Projects","highlight_start":1,"highlight_end":25},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Augment clap:","highlight_start":1,"highlight_end":18},{"text":"//! - [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux","highlight_start":1,"highlight_end":104},{"text":"//! - [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)","highlight_start":1,"highlight_end":116},{"text":"//! - [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`","highlight_start":1,"highlight_end":93},{"text":"//! - [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)","highlight_start":1,"highlight_end":96},{"text":"//! - [clap_complete](https://crates.io/crates/clap_complete) for shell completion support","highlight_start":1,"highlight_end":91},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! CLI Helpers","highlight_start":1,"highlight_end":16},{"text":"//! - [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)","highlight_start":1,"highlight_end":74},{"text":"//! - [clap-cargo](https://crates.io/crates/clap-cargo)","highlight_start":1,"highlight_end":56},{"text":"//! - [concolor-clap](https://crates.io/crates/concolor-clap)","highlight_start":1,"highlight_end":62},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Testing","highlight_start":1,"highlight_end":12},{"text":"//! - [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing","highlight_start":1,"highlight_end":74},{"text":"//! - [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing","highlight_start":1,"highlight_end":83},{"text":"//! - [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing","highlight_start":1,"highlight_end":132},{"text":"//!","highlight_start":1,"highlight_end":4},{"text":"//! Documentation:","highlight_start":1,"highlight_end":19},{"text":"//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book","highlight_start":1,"highlight_end":84},{"text":"//!","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n*(See also [feature flag reference][_features])*\n                                    ^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_features` in scope","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `_features`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/lib.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! > **Command Line Argument Parser for Rust**\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! Quick Links:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - Derive [tutorial][_derive::_tutorial] and [reference][_derive]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! - [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           *(See also [feature flag reference][_features])*\u001b[0m\n\u001b[0m                                               ^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_features` in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `clap_derive`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":91,"byte_end":102,"line_start":2,"line_end":2,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"//! macros in [`clap_derive`].","highlight_start":17,"highlight_end":28}],"label":"no item named `clap_derive` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `clap_derive`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:2:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//! macros in [`clap_derive`].\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `clap_derive` in scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_derive`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":209,"byte_end":2465,"line_start":9,"line_end":78,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"/// Parse command-line arguments into `Self`.","highlight_start":1,"highlight_end":46},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// The primary one-stop-shop trait used to create an instance of a `clap`","highlight_start":1,"highlight_end":75},{"text":"/// [`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back","highlight_start":1,"highlight_end":81},{"text":"/// into concrete instance of the user struct.","highlight_start":1,"highlight_end":47},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// This trait is primarily a convenience on top of [`FromArgMatches`] +","highlight_start":1,"highlight_end":73},{"text":"/// [`CommandFactory`] which uses those two underlying traits to build the two","highlight_start":1,"highlight_end":79},{"text":"/// fundamental functions `parse` which uses the `std::env::args_os` iterator,","highlight_start":1,"highlight_end":79},{"text":"/// and `parse_from` which allows the consumer to supply the iterator (along","highlight_start":1,"highlight_end":77},{"text":"/// with fallible options for each).","highlight_start":1,"highlight_end":37},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See also [`Subcommand`] and [`Args`].","highlight_start":1,"highlight_end":42},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Examples","highlight_start":1,"highlight_end":15},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// The following example creates a `Context` struct that would be used","highlight_start":1,"highlight_end":72},{"text":"/// throughout the application representing the normalized values coming from","highlight_start":1,"highlight_end":78},{"text":"/// the CLI.","highlight_start":1,"highlight_end":13},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// /// My super CLI","highlight_start":1,"highlight_end":21},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// #[command(name = \"demo\")]","highlight_start":1,"highlight_end":30},{"text":"/// struct Context {","highlight_start":1,"highlight_end":21},{"text":"///     /// More verbose output","highlight_start":1,"highlight_end":32},{"text":"///     #[arg(long)]","highlight_start":1,"highlight_end":21},{"text":"///     verbose: bool,","highlight_start":1,"highlight_end":23},{"text":"///     /// An optional name","highlight_start":1,"highlight_end":29},{"text":"///     #[arg(short, long)]","highlight_start":1,"highlight_end":28},{"text":"///     name: Option<String>,","highlight_start":1,"highlight_end":30},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// The equivalent [`Command`] struct + `From` implementation:","highlight_start":1,"highlight_end":63},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// ```rust","highlight_start":1,"highlight_end":12},{"text":"/// # use clap::{Command, Arg, ArgMatches, ArgAction};","highlight_start":1,"highlight_end":55},{"text":"/// Command::new(\"demo\")","highlight_start":1,"highlight_end":25},{"text":"///     .about(\"My super CLI\")","highlight_start":1,"highlight_end":31},{"text":"///     .arg(Arg::new(\"verbose\")","highlight_start":1,"highlight_end":33},{"text":"///         .long(\"verbose\")","highlight_start":1,"highlight_end":29},{"text":"///         .action(ArgAction::SetTrue)","highlight_start":1,"highlight_end":40},{"text":"///         .help(\"More verbose output\"))","highlight_start":1,"highlight_end":42},{"text":"///     .arg(Arg::new(\"name\")","highlight_start":1,"highlight_end":30},{"text":"///         .long(\"name\")","highlight_start":1,"highlight_end":26},{"text":"///         .short('n')","highlight_start":1,"highlight_end":24},{"text":"///         .help(\"An optional name\")","highlight_start":1,"highlight_end":38},{"text":"///         .action(ArgAction::Set));","highlight_start":1,"highlight_end":38},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// struct Context {","highlight_start":1,"highlight_end":21},{"text":"///     verbose: bool,","highlight_start":1,"highlight_end":23},{"text":"///     name: Option<String>,","highlight_start":1,"highlight_end":30},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// impl From<ArgMatches> for Context {","highlight_start":1,"highlight_end":40},{"text":"///     fn from(m: ArgMatches) -> Self {","highlight_start":1,"highlight_end":41},{"text":"///         Context {","highlight_start":1,"highlight_end":22},{"text":"///             verbose: *m.get_one::<bool>(\"verbose\").expect(\"defaulted_by_clap\"),","highlight_start":1,"highlight_end":84},{"text":"///             name: m.get_one::<String>(\"name\").cloned(),","highlight_start":1,"highlight_end":60},{"text":"///         }","highlight_start":1,"highlight_end":14},{"text":"///     }","highlight_start":1,"highlight_end":10},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8},{"text":"///","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n                           ^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_derive` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_derive`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:9:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse command-line arguments into `Self`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// The primary one-stop-shop trait used to create an instance of a `clap`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           See the [derive reference](crate::_derive) for attributes and best practices.\u001b[0m\n\u001b[0m                                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_derive` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":209,"byte_end":2465,"line_start":9,"line_end":78,"column_start":1,"column_end":4,"is_primary":true,"text":[{"text":"/// Parse command-line arguments into `Self`.","highlight_start":1,"highlight_end":46},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// The primary one-stop-shop trait used to create an instance of a `clap`","highlight_start":1,"highlight_end":75},{"text":"/// [`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back","highlight_start":1,"highlight_end":81},{"text":"/// into concrete instance of the user struct.","highlight_start":1,"highlight_end":47},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// This trait is primarily a convenience on top of [`FromArgMatches`] +","highlight_start":1,"highlight_end":73},{"text":"/// [`CommandFactory`] which uses those two underlying traits to build the two","highlight_start":1,"highlight_end":79},{"text":"/// fundamental functions `parse` which uses the `std::env::args_os` iterator,","highlight_start":1,"highlight_end":79},{"text":"/// and `parse_from` which allows the consumer to supply the iterator (along","highlight_start":1,"highlight_end":77},{"text":"/// with fallible options for each).","highlight_start":1,"highlight_end":37},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See also [`Subcommand`] and [`Args`].","highlight_start":1,"highlight_end":42},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Examples","highlight_start":1,"highlight_end":15},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// The following example creates a `Context` struct that would be used","highlight_start":1,"highlight_end":72},{"text":"/// throughout the application representing the normalized values coming from","highlight_start":1,"highlight_end":78},{"text":"/// the CLI.","highlight_start":1,"highlight_end":13},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// /// My super CLI","highlight_start":1,"highlight_end":21},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// #[command(name = \"demo\")]","highlight_start":1,"highlight_end":30},{"text":"/// struct Context {","highlight_start":1,"highlight_end":21},{"text":"///     /// More verbose output","highlight_start":1,"highlight_end":32},{"text":"///     #[arg(long)]","highlight_start":1,"highlight_end":21},{"text":"///     verbose: bool,","highlight_start":1,"highlight_end":23},{"text":"///     /// An optional name","highlight_start":1,"highlight_end":29},{"text":"///     #[arg(short, long)]","highlight_start":1,"highlight_end":28},{"text":"///     name: Option<String>,","highlight_start":1,"highlight_end":30},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// The equivalent [`Command`] struct + `From` implementation:","highlight_start":1,"highlight_end":63},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// ```rust","highlight_start":1,"highlight_end":12},{"text":"/// # use clap::{Command, Arg, ArgMatches, ArgAction};","highlight_start":1,"highlight_end":55},{"text":"/// Command::new(\"demo\")","highlight_start":1,"highlight_end":25},{"text":"///     .about(\"My super CLI\")","highlight_start":1,"highlight_end":31},{"text":"///     .arg(Arg::new(\"verbose\")","highlight_start":1,"highlight_end":33},{"text":"///         .long(\"verbose\")","highlight_start":1,"highlight_end":29},{"text":"///         .action(ArgAction::SetTrue)","highlight_start":1,"highlight_end":40},{"text":"///         .help(\"More verbose output\"))","highlight_start":1,"highlight_end":42},{"text":"///     .arg(Arg::new(\"name\")","highlight_start":1,"highlight_end":30},{"text":"///         .long(\"name\")","highlight_start":1,"highlight_end":26},{"text":"///         .short('n')","highlight_start":1,"highlight_end":24},{"text":"///         .help(\"An optional name\")","highlight_start":1,"highlight_end":38},{"text":"///         .action(ArgAction::Set));","highlight_start":1,"highlight_end":38},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// struct Context {","highlight_start":1,"highlight_end":21},{"text":"///     verbose: bool,","highlight_start":1,"highlight_end":23},{"text":"///     name: Option<String>,","highlight_start":1,"highlight_end":30},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// impl From<ArgMatches> for Context {","highlight_start":1,"highlight_end":40},{"text":"///     fn from(m: ArgMatches) -> Self {","highlight_start":1,"highlight_end":41},{"text":"///         Context {","highlight_start":1,"highlight_end":22},{"text":"///             verbose: *m.get_one::<bool>(\"verbose\").expect(\"defaulted_by_clap\"),","highlight_start":1,"highlight_end":84},{"text":"///             name: m.get_one::<String>(\"name\").cloned(),","highlight_start":1,"highlight_end":60},{"text":"///         }","highlight_start":1,"highlight_end":14},{"text":"///     }","highlight_start":1,"highlight_end":10},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8},{"text":"///","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n                                                        ^^^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_features` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:9:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse command-line arguments into `Self`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// The primary one-stop-shop trait used to create an instance of a `clap`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// [`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m           \u001b[0m\n\u001b[0m           **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\u001b[0m\n\u001b[0m                                                                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_derive`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":9032,"byte_end":9956,"line_start":256,"line_end":283,"column_start":1,"column_end":8,"is_primary":true,"text":[{"text":"/// Parse a set of arguments into a user-defined container.","highlight_start":1,"highlight_end":60},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// Implementing this trait lets a parent container delegate argument parsing behavior to `Self`.","highlight_start":1,"highlight_end":98},{"text":"/// with:","highlight_start":1,"highlight_end":10},{"text":"/// - `#[command(flatten)] args: ChildArgs`: Attribute can only be used with struct fields that impl","highlight_start":1,"highlight_end":101},{"text":"///   `Args`.","highlight_start":1,"highlight_end":14},{"text":"/// - `Variant(ChildArgs)`: No attribute is used with enum variants that impl `Args`.","highlight_start":1,"highlight_end":86},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Example","highlight_start":1,"highlight_end":14},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// struct Args {","highlight_start":1,"highlight_end":18},{"text":"///     #[command(flatten)]","highlight_start":1,"highlight_end":28},{"text":"///     logging: LogArgs,","highlight_start":1,"highlight_end":26},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// #[derive(clap::Args)]","highlight_start":1,"highlight_end":26},{"text":"/// struct LogArgs {","highlight_start":1,"highlight_end":21},{"text":"///     #[arg(long, short = 'v', action = clap::ArgAction::Count)]","highlight_start":1,"highlight_end":67},{"text":"///     verbose: i8,","highlight_start":1,"highlight_end":21},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n                           ^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_derive` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_derive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:256:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse a set of arguments into a user-defined container.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implementing this trait lets a parent container delegate argument parsing behavior to `Self`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// with:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m            \u001b[0m\n\u001b[0m            See the [derive reference](crate::_derive) for attributes and best practices.\u001b[0m\n\u001b[0m                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_derive` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":9032,"byte_end":9956,"line_start":256,"line_end":283,"column_start":1,"column_end":8,"is_primary":true,"text":[{"text":"/// Parse a set of arguments into a user-defined container.","highlight_start":1,"highlight_end":60},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// Implementing this trait lets a parent container delegate argument parsing behavior to `Self`.","highlight_start":1,"highlight_end":98},{"text":"/// with:","highlight_start":1,"highlight_end":10},{"text":"/// - `#[command(flatten)] args: ChildArgs`: Attribute can only be used with struct fields that impl","highlight_start":1,"highlight_end":101},{"text":"///   `Args`.","highlight_start":1,"highlight_end":14},{"text":"/// - `Variant(ChildArgs)`: No attribute is used with enum variants that impl `Args`.","highlight_start":1,"highlight_end":86},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Example","highlight_start":1,"highlight_end":14},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// struct Args {","highlight_start":1,"highlight_end":18},{"text":"///     #[command(flatten)]","highlight_start":1,"highlight_end":28},{"text":"///     logging: LogArgs,","highlight_start":1,"highlight_end":26},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// #[derive(clap::Args)]","highlight_start":1,"highlight_end":26},{"text":"/// struct LogArgs {","highlight_start":1,"highlight_end":21},{"text":"///     #[arg(long, short = 'v', action = clap::ArgAction::Count)]","highlight_start":1,"highlight_end":67},{"text":"///     verbose: i8,","highlight_start":1,"highlight_end":21},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n                                                        ^^^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_features` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:256:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse a set of arguments into a user-defined container.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implementing this trait lets a parent container delegate argument parsing behavior to `Self`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// with:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m            \u001b[0m\n\u001b[0m            **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\u001b[0m\n\u001b[0m                                                                    ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_derive`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":10516,"byte_end":11430,"line_start":301,"line_end":329,"column_start":1,"column_end":8,"is_primary":true,"text":[{"text":"/// Parse a sub-command into a user-defined enum.","highlight_start":1,"highlight_end":50},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// Implementing this trait lets a parent container delegate subcommand behavior to `Self`.","highlight_start":1,"highlight_end":92},{"text":"/// with:","highlight_start":1,"highlight_end":10},{"text":"/// - `#[command(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum","highlight_start":1,"highlight_end":102},{"text":"///   variants that impl `Subcommand`.","highlight_start":1,"highlight_end":39},{"text":"/// - `#[command(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl","highlight_start":1,"highlight_end":101},{"text":"///   `Subcommand`.","highlight_start":1,"highlight_end":20},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Example","highlight_start":1,"highlight_end":14},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// struct Args {","highlight_start":1,"highlight_end":18},{"text":"///     #[command(subcommand)]","highlight_start":1,"highlight_end":31},{"text":"///     action: Action,","highlight_start":1,"highlight_end":24},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// #[derive(clap::Subcommand)]","highlight_start":1,"highlight_end":32},{"text":"/// enum Action {","highlight_start":1,"highlight_end":18},{"text":"///     Add,","highlight_start":1,"highlight_end":13},{"text":"///     Remove,","highlight_start":1,"highlight_end":16},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n                           ^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_derive` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_derive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:301:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse a sub-command into a user-defined enum.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implementing this trait lets a parent container delegate subcommand behavior to `Self`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// with:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m            \u001b[0m\n\u001b[0m            See the [derive reference](crate::_derive) for attributes and best practices.\u001b[0m\n\u001b[0m                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_derive` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":10516,"byte_end":11430,"line_start":301,"line_end":329,"column_start":1,"column_end":8,"is_primary":true,"text":[{"text":"/// Parse a sub-command into a user-defined enum.","highlight_start":1,"highlight_end":50},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// Implementing this trait lets a parent container delegate subcommand behavior to `Self`.","highlight_start":1,"highlight_end":92},{"text":"/// with:","highlight_start":1,"highlight_end":10},{"text":"/// - `#[command(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum","highlight_start":1,"highlight_end":102},{"text":"///   variants that impl `Subcommand`.","highlight_start":1,"highlight_end":39},{"text":"/// - `#[command(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl","highlight_start":1,"highlight_end":101},{"text":"///   `Subcommand`.","highlight_start":1,"highlight_end":20},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Example","highlight_start":1,"highlight_end":14},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// struct Args {","highlight_start":1,"highlight_end":18},{"text":"///     #[command(subcommand)]","highlight_start":1,"highlight_end":31},{"text":"///     action: Action,","highlight_start":1,"highlight_end":24},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// #[derive(clap::Subcommand)]","highlight_start":1,"highlight_end":32},{"text":"/// enum Action {","highlight_start":1,"highlight_end":18},{"text":"///     Add,","highlight_start":1,"highlight_end":13},{"text":"///     Remove,","highlight_start":1,"highlight_end":16},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n                                                        ^^^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_features` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:301:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse a sub-command into a user-defined enum.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Implementing this trait lets a parent container delegate subcommand behavior to `Self`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// with:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m            \u001b[0m\n\u001b[0m            **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\u001b[0m\n\u001b[0m                                                                    ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_derive`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":11970,"byte_end":12821,"line_start":345,"line_end":373,"column_start":1,"column_end":8,"is_primary":true,"text":[{"text":"/// Parse arguments into enums.","highlight_start":1,"highlight_end":32},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// When deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute","highlight_start":1,"highlight_end":95},{"text":"/// `#[arg(value_enum)]` which will","highlight_start":1,"highlight_end":36},{"text":"/// - Call [`EnumValueParser`][crate::builder::EnumValueParser]","highlight_start":1,"highlight_end":64},{"text":"/// - Allowing using the `#[arg(default_value_t)]` attribute without implementing `Display`.","highlight_start":1,"highlight_end":93},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Example","highlight_start":1,"highlight_end":14},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// struct Args {","highlight_start":1,"highlight_end":18},{"text":"///     #[arg(value_enum)]","highlight_start":1,"highlight_end":27},{"text":"///     level: Level,","highlight_start":1,"highlight_end":22},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// #[derive(clap::ValueEnum, Clone)]","highlight_start":1,"highlight_end":38},{"text":"/// enum Level {","highlight_start":1,"highlight_end":17},{"text":"///     Debug,","highlight_start":1,"highlight_end":15},{"text":"///     Info,","highlight_start":1,"highlight_end":14},{"text":"///     Warning,","highlight_start":1,"highlight_end":17},{"text":"///     Error,","highlight_start":1,"highlight_end":15},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n                           ^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_derive` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_derive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:345:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse arguments into enums.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// When deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// `#[arg(value_enum)]` which will\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m            \u001b[0m\n\u001b[0m            See the [derive reference](crate::_derive) for attributes and best practices.\u001b[0m\n\u001b[0m                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_derive` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/derive.rs","byte_start":11970,"byte_end":12821,"line_start":345,"line_end":373,"column_start":1,"column_end":8,"is_primary":true,"text":[{"text":"/// Parse arguments into enums.","highlight_start":1,"highlight_end":32},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// When deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute","highlight_start":1,"highlight_end":95},{"text":"/// `#[arg(value_enum)]` which will","highlight_start":1,"highlight_end":36},{"text":"/// - Call [`EnumValueParser`][crate::builder::EnumValueParser]","highlight_start":1,"highlight_end":64},{"text":"/// - Allowing using the `#[arg(default_value_t)]` attribute without implementing `Display`.","highlight_start":1,"highlight_end":93},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// See the [derive reference](crate::_derive) for attributes and best practices.","highlight_start":1,"highlight_end":82},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]","highlight_start":1,"highlight_end":78},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// # Example","highlight_start":1,"highlight_end":14},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"#[cfg_attr(not(feature = \"derive\"), doc = \" ```ignore\")]","highlight_start":1,"highlight_end":57},{"text":"#[cfg_attr(feature = \"derive\", doc = \" ```\")]","highlight_start":1,"highlight_end":46},{"text":"/// #[derive(clap::Parser)]","highlight_start":1,"highlight_end":28},{"text":"/// struct Args {","highlight_start":1,"highlight_end":18},{"text":"///     #[arg(value_enum)]","highlight_start":1,"highlight_end":27},{"text":"///     level: Level,","highlight_start":1,"highlight_end":22},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"///","highlight_start":1,"highlight_end":4},{"text":"/// #[derive(clap::ValueEnum, Clone)]","highlight_start":1,"highlight_end":38},{"text":"/// enum Level {","highlight_start":1,"highlight_end":17},{"text":"///     Debug,","highlight_start":1,"highlight_end":15},{"text":"///     Info,","highlight_start":1,"highlight_end":14},{"text":"///     Warning,","highlight_start":1,"highlight_end":17},{"text":"///     Error,","highlight_start":1,"highlight_end":15},{"text":"/// }","highlight_start":1,"highlight_end":6},{"text":"/// ```","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the link appears in this line:\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n                                                        ^^^^^^^^^^^^^^^^","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"no item named `_features` in module `clap`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/derive.rs:345:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// Parse arguments into enums.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// When deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// `#[arg(value_enum)]` which will\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// ```\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the link appears in this line:\u001b[0m\n\u001b[0m            \u001b[0m\n\u001b[0m            **NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\u001b[0m\n\u001b[0m                                                                    ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `super::Arg::env`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/action.rs","byte_start":9812,"byte_end":9827,"line_start":278,"line_end":278,"column_start":68,"column_end":83,"is_primary":true,"text":[{"text":"    /// [`default_values`][super::Arg::default_values] and [`env`][super::Arg::env] may still be","highlight_start":68,"highlight_end":83}],"label":"the struct `Arg` has no field or associated item named `env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `super::Arg::env`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/action.rs:278:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// [`default_values`][super::Arg::default_values] and [`env`][super::Arg::env] may still be\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `Arg` has no field or associated item named `env`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::crate_name`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/command.rs","byte_start":4024,"byte_end":4042,"line_start":119,"line_end":119,"column_start":68,"column_end":86,"is_primary":true,"text":[{"text":"    /// See also [`command!`](crate::command!) and [`crate_name!`](crate::crate_name!).","highlight_start":68,"highlight_end":86}],"label":"no item named `crate_name` in module `clap`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::crate_name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/command.rs:119:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// See also [`command!`](crate::command!) and [`crate_name!`](crate::crate_name!).\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `crate_name` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/command.rs","byte_start":36252,"byte_end":36268,"line_start":1065,"line_end":1065,"column_start":59,"column_end":75,"is_primary":true,"text":[{"text":"    /// **NOTE:** This requires the [`wrap_help` feature][crate::_features]","highlight_start":59,"highlight_end":75}],"label":"no item named `_features` in module `clap`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/command.rs:1065:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// **NOTE:** This requires the [`wrap_help` feature][crate::_features]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/command.rs","byte_start":37102,"byte_end":37118,"line_start":1091,"line_end":1091,"column_start":59,"column_end":75,"is_primary":true,"text":[{"text":"    /// **NOTE:** This requires the [`wrap_help` feature][crate::_features]","highlight_start":59,"highlight_end":75}],"label":"no item named `_features` in module `clap`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/command.rs:1091:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1091\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// **NOTE:** This requires the [`wrap_help` feature][crate::_features]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate_authors`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/command.rs","byte_start":48702,"byte_end":48716,"line_start":1453,"line_end":1453,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    /// **Pro-tip:** Use `clap`s convenience macro [`crate_authors!`] to","highlight_start":54,"highlight_end":68}],"label":"no item named `crate_authors` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate_authors`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/command.rs:1453:54\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// **Pro-tip:** Use `clap`s convenience macro [`crate_authors!`] to\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `crate_authors` in scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::crate_description`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/command.rs","byte_start":49656,"byte_end":49681,"line_start":1481,"line_end":1481,"column_start":41,"column_end":66,"is_primary":true,"text":[{"text":"    /// See also [`crate_description!`](crate::crate_description!).","highlight_start":41,"highlight_end":66}],"label":"no item named `crate_description` in module `clap`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::crate_description`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/command.rs:1481:41\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1481\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// See also [`crate_description!`](crate::crate_description!).\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `crate_description` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate_version`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/command.rs","byte_start":54122,"byte_end":54136,"line_start":1610,"line_end":1610,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    /// **Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to","highlight_start":54,"highlight_end":68}],"label":"no item named `crate_version` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate_version`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/command.rs:1610:54\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1610\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// **Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `crate_version` in scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `crate_version`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/command.rs","byte_start":54826,"byte_end":54840,"line_start":1632,"line_end":1632,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    /// **Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to","highlight_start":54,"highlight_end":68}],"label":"no item named `crate_version` in scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate_version`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/command.rs:1632:54\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1632\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// **Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `crate_version` in scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/os_str.rs","byte_start":156,"byte_end":172,"line_start":6,"line_end":6,"column_start":14,"column_end":30,"is_primary":true,"text":[{"text":"/// feature][crate::_features]","highlight_start":14,"highlight_end":30}],"label":"no item named `_features` in module `clap`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/os_str.rs:6:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// feature][crate::_features]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/builder/str.rs","byte_start":128,"byte_end":144,"line_start":4,"line_end":4,"column_start":14,"column_end":30,"is_primary":true,"text":[{"text":"/// feature][crate::_features]","highlight_start":14,"highlight_end":30}],"label":"no item named `_features` in module `clap`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/builder/str.rs:4:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// feature][crate::_features]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::_features`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/error/format.rs","byte_start":784,"byte_end":800,"line_start":25,"line_end":25,"column_start":55,"column_end":71,"is_primary":true,"text":[{"text":"/// **NOTE:** Consider removing the [`error-context`][crate::_features] default feature if using this to remove all","highlight_start":55,"highlight_end":71}],"label":"no item named `_features` in module `clap`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::_features`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/error/format.rs:25:55\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// **NOTE:** Consider removing the [`error-context`][crate::_features] default feature if using this to remove all\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno item named `_features` in module `clap`\u001b[0m\n\n"}
{"message":"unresolved link to `crate::Arg::env`","code":{"code":"rustdoc::broken_intra_doc_links","explanation":null},"level":"warning","spans":[{"file_name":"/home/arpangreat/offline_resources/clap/src/parser/matches/value_source.rs","byte_start":257,"byte_end":272,"line_start":7,"line_end":7,"column_start":33,"column_end":48,"is_primary":true,"text":[{"text":"    /// Value came [`Arg::env`][crate::Arg::env]","highlight_start":33,"highlight_end":48}],"label":"the struct `Arg` has no field or associated item named `env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unresolved link to `crate::Arg::env`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/arpangreat/offline_resources/clap/src/parser/matches/value_source.rs:7:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Value came [`Arg::env`][crate::Arg::env]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe struct `Arg` has no field or associated item named `env`\u001b[0m\n\n"}
{"message":"27 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 27 warnings emitted\u001b[0m\n\n"}
